--@name obj parser
--@author kaisermustard

--[[
  Textured :
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/cube.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/sphere.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/corner_cube.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/corner_cube_curved.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/teapot.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/shuttle.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/suzzane.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/deer.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/wolf.obj
    https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/non_textured/male_head.obj
]]--

if CLIENT then
  local scale = 5

  local state = 0
  
  local curtime = 0
  
  local x = 0

  local quota = 0.9

  local directory = "non_textured"
  local model = "shuttle"
  local path = "https://raw.githubusercontent.com/kaisermustard/-SF-E2-OBJ_Parser/master/models/".. directory .. "/" .. model .. ".obj"

  local data = {}

  local vertices = {}
  local verticesnormals = {}
  local verticestextures = {}
  local faces = {}
  local normals = {}
  local uvs = {}
    
  local meshtable = {}
  local obj = nil
    
  local texture = render.getTextureID("")
    
  local first = 1
   
  local function perf(value)
    return (quotaUsed() < quotaMax() * value) and (quotaAverage() < quotaMax())
  end

  local function callback(content, size) 
    table.add(data, string.explode("\n+", content, true))
        
    curtime = timer.curtime()
                
    state = 1
  end
    
  local function update(  ) 
    if state == 0 then
      hook.add("permissionrequest", "permission", function()
        if hasPermission("http.get", path) then
          if http.canRequest(  ) then
            http.get(path, callback)
          end
        end
      end)
    elseif state == 1 then
      while perf(quota) and x < table.count(data) do
        x = x + 1
            
        local s = data[x]
            
        local word = string.explode("%s+", s, true)
        local type = word[1]
            
        if type == "v" then
          local x = tonumber(word[2]) * scale
          local y = tonumber(word[3]) * scale
          local z = tonumber(word[4]) * scale
                
          table.insert(vertices, Vector(x, y, z))
        end
                
        if type == "vn" then
          local x = tonumber(word[2])
          local y = tonumber(word[3])
          local z = tonumber(word[4])
                
          table.insert(verticesnormals, Vector(x, y, z))
        end
                
        if type == "vt" then
          local u = tonumber(word[2]) 
          local v = tonumber(word[3]) 
                    
          table.insert(verticestextures, Vector(u, v))
        end
                
        if type == "f" then
          local va = tonumber(string.explode("/", word[2], false)[1])
          local vb = tonumber(string.explode("/", word[3], false)[1])
          local vc = tonumber(string.explode("/", word[4], false)[1])
                    
          local vta = tonumber(string.explode("/", word[2], false)[2])
          local vtb = tonumber(string.explode("/", word[3], false)[2])
          local vtc = tonumber(string.explode("/", word[4], false)[2])
                    
          local vna = tonumber(string.explode("/", word[2], false)[3])
          local vnb = tonumber(string.explode("/", word[3], false)[3])
          local vnc = tonumber(string.explode("/", word[4], false)[3])
                
          table.insert(faces, Vector(va, vb, vc))
                    
          table.insert(uvs, Vector(vta, vtb, vtc))
                    
          table.insert(normals, Vector(vna, vnb, vnc))
        end
    end
    if x >= table.count(data) then
      x = 0
                    
      state = 2
    end
            
    elseif state == 2 then
      while perf(quota) and x < table.count(faces) do
        x = x + 1
                
        local normal = (vertices[faces[x].y] - vertices[faces[x].x]):cross(vertices[faces[x].z] - vertices[faces[x].x]):getNormalized()
                
        table.add(meshtable, {
          {color = Color(128 + (normal.x * 128), 128 + (normal.y * 128), 128, 255), pos = -vertices[faces[x].x], u = 0, v = 0},
          {color = Color(128 + (normal.x * 128), 128 + (normal.y * 128), 128, 255), pos = -vertices[faces[x].y], u = 0, v = 0},
          {color = Color(128 + (normal.x * 128), 128 + (normal.y * 128), 128, 255), pos = -vertices[faces[x].z], u = 0, v = 0},
        })
      end
      if x >= table.count(faces) then
        obj = mesh.createFromTable(meshtable)
                
        state = 3
      end
    end
  end
    
  local function draw()
    if state == 3 then
      matrix = chip():getMatrix()
      matrix:setAngles(chip():localToWorldAngles(Angle(0, 0, -90)))
            
      render.pushMatrix(matrix, true)
            
      render.setTexture(texture)
      
      render.enableDepth(true)
        
      if obj != nil then
        obj:draw()
      end
        
      render.popMatrix()
            
      if first == 1 then
        printMessage(2, "Time :" .. " " .. math.round(timer.curtime() - curtime, 2) .. "s" .. "\n" .. "Vertices :" .. " " .. table.count(vertices) .. "\n" .. "Faces :" .. " " .. table.count(faces))
        
        first = 0
      end
    end
  end

  setupPermissionRequest({"http.get"}, "", true)
    
  hook.add("tick", "", update)
  hook.add("postdrawopaquerenderables", "", draw)
end

if SERVER then
  for k, v in pairs(find.byClass("starfall_hud")) do
    if v != nil then
      if v:getOwner() == owner() then
        if chip():getPos():getDistance(v:getPos()) < 25 then
          v:linkComponent(chip())
          
          v:setPos(chip():localToWorld(Vector(0, 0, 1.25)))
          v:setAngles(chip():localToWorldAngles(Angle(0, 0, 1.25)))
          
          constraint.weld(v, chip())
        end
      end
    end
  end
end
